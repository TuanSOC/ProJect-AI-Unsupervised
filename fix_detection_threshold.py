#!/usr/bin/env python3
"""
Script ƒë·ªÉ fix detection threshold v√† gi·∫£m false positive
"""

import json
import logging
from optimized_sqli_detector import OptimizedSQLIDetector

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def analyze_detection_issue():
    """Ph√¢n t√≠ch v·∫•n ƒë·ªÅ detection"""
    
    print("üîç Analyzing Detection Issue")
    print("=" * 50)
    
    # Load detector
    detector = OptimizedSQLIDetector()
    detector.load_model('models/optimized_sqli_detector.pkl')
    
    # Test case g√¢y false positive
    false_positive_log = {
        "time": "2025-10-22T00:17:28+0700",
        "remote_ip": "192.168.205.2",
        "method": "GET",
        "uri": "/DVWA/vulnerabilities/sqli_blind/index.php",
        "query_string": "?id=tuan&Submit=Submit",
        "payload": "id=tuan&Submit=Submit",
        "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
        "status": 200
    }
    
    print("üìã Testing False Positive Case:")
    print(f"   URI: {false_positive_log['uri']}")
    print(f"   Query: {false_positive_log['query_string']}")
    print(f"   Payload: {false_positive_log['payload']}")
    print()
    
    # Test v·ªõi c√°c threshold kh√°c nhau
    thresholds = [0.5, 0.6, 0.7, 0.8, 0.9]
    
    print("üéØ Testing Different Thresholds:")
    for threshold in thresholds:
        is_anomaly, score = detector.predict_single(false_positive_log, threshold=threshold)
        result = "üö® DETECTED" if is_anomaly else "‚úÖ NORMAL"
        print(f"   Threshold {threshold}: {result} (Score: {score:.3f})")
    
    print()
    
    # Test v·ªõi SQLi th·∫≠t
    real_sqli_log = {
        "time": "2025-10-22T00:17:28+0700",
        "remote_ip": "192.168.205.2",
        "method": "GET",
        "uri": "/DVWA/vulnerabilities/sqli/index.php",
        "query_string": "?id=%27+UNION+SELECT+null%2C+version%28%29+--&Submit=Submit",
        "payload": "id=%27+UNION+SELECT+null%2C+version%28%29+--&Submit=Submit",
        "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
        "status": 200
    }
    
    print("üìã Testing Real SQLi Case:")
    print(f"   URI: {real_sqli_log['uri']}")
    print(f"   Query: {real_sqli_log['query_string']}")
    print(f"   Payload: {real_sqli_log['payload']}")
    print()
    
    print("üéØ Testing Different Thresholds:")
    for threshold in thresholds:
        is_anomaly, score = detector.predict_single(real_sqli_log, threshold=threshold)
        result = "üö® DETECTED" if is_anomaly else "‚úÖ NORMAL"
        print(f"   Threshold {threshold}: {result} (Score: {score:.3f})")
    
    print()
    print("üí° Recommendation:")
    print("   - N·∫øu false positive c√≥ score ~0.53-0.55")
    print("   - N·∫øu real SQLi c√≥ score ~0.55-0.60")
    print("   - N√™n tƒÉng threshold l√™n 0.8-0.9 ƒë·ªÉ gi·∫£m false positive")
    print("   - Ho·∫∑c retrain model v·ªõi nhi·ªÅu normal data h∆°n")

def update_realtime_collector_threshold():
    """Update threshold trong realtime collector"""
    
    print("\nüîß Updating Realtime Collector Threshold")
    print("=" * 50)
    
    # ƒê·ªçc file realtime_log_collector.py
    try:
        with open('realtime_log_collector.py', 'r') as f:
            content = f.read()
        
        # T√¨m v√† thay th·∫ø threshold
        old_threshold = "DETECTION_THRESHOLD = 0.7"
        new_threshold = "DETECTION_THRESHOLD = 0.8"  # TƒÉng threshold ƒë·ªÉ gi·∫£m false positive
        
        if old_threshold in content:
            content = content.replace(old_threshold, new_threshold)
            
            with open('realtime_log_collector.py', 'w') as f:
                f.write(content)
            
            print(f"‚úÖ Updated threshold from 0.7 to 0.8")
            print("   Restart realtime_log_collector.py to apply changes")
        else:
            print("‚ùå Could not find threshold setting in realtime_log_collector.py")
            
    except Exception as e:
        print(f"‚ùå Error updating threshold: {e}")

if __name__ == "__main__":
    analyze_detection_issue()
    update_realtime_collector_threshold()
